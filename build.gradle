class database {
    def databaseHost = "localhost";
    def databaseName = "api_database"; 
    def databaseUser = "root";
    def databasePassword = "1234";
    def databasePort = 3306

    void setDatabaseVariables(){
        
        if(System.getenv("DB_HOST")){
            this.databaseHost = System.getenv("DB_HOST"); 
        }

        if(System.getenv("DB_DATABASE")){
            this.databaseName = System.getenv("DB_DATABASE");
        }

        if(System.getenv("DB_USERNAME")){
            this.databaseUser = System.getenv("DB_USERNAME"); 
        }

        if(System.getenv("DB_PASSWORD")){
            this.databasePassword = System.getenv("DB_PASSWORD");
        }

        if(System.getenv("DB_PORT")){
            this.databasePort = System.getenv("DB_PORT");
        }
    }
}

task cleanProjectFolders(type: Delete){
    group = 'App'
    description = 'Elimina las carpetas generadas dinamicamente'

    delete '.scannerwork', 'vendor', 'build'
}

task composerInstall(type: Exec){
    group = 'App'
    description = 'Descarga las librerias PHP'

    executable "sh"
    args "-c", "composer install"
}

task phpUnitTests(type: Exec){
    group = 'Tests'
    description = 'Ejecuta los tests de PHP'

    executable "sh"
    args "-c", "./vendor/bin/phpunit"
}

task serverStart(type: Exec){
    group = 'App'
    description = 'Levanta el servidor'

    executable "sh"
    args "-c", "php artisan serve --host=0.0.0.0 --port=8000"
}

task cleanDatabase(type: Exec){
    group = 'Database'
    description = 'Limpia la base de datos'

    def databaseClass = new database();
    databaseClass.setDatabaseVariables();

    def urlHost = "jdbc:mysql://" + databaseClass.databaseHost + ":"+ databaseClass.databasePort +"/" + databaseClass.databaseName
    
    executable "sh"
    args "-c", "flyway clean -configFiles=./database/sql/flyway.conf -user=" + databaseClass.databaseUser + " -password=" + databaseClass.databasePassword + " -url=${urlHost}" 
}

task migrateDatabase(type: Exec) {
    group = 'Database'
    description = 'Hace la migración de los sql'

    dependsOn cleanDatabase

    def databaseClass = new database();
    databaseClass.setDatabaseVariables();
    
    def urlHost = "jdbc:mysql://" + databaseClass.databaseHost + ":"+ databaseClass.databasePort + "/" + databaseClass.databaseName

    executable "sh"
    args "-c", "flyway -configFiles=./database/sql/flyway.conf migrate -user=" + 
        databaseClass.databaseUser + " -password=" + databaseClass.databasePassword + " -url=${urlHost}" 
}

task sonarScanner(type: Exec){
    group = 'Tests'
    description = 'Ejecuta sonar-scanner'

    executable "sh"
    args "-c", "sonar-scanner"
}

task passportToken(type: Exec){
    group = 'Database'
    description = 'Token para passport PHP'

    dependsOn composerInstall
    dependsOn cleanDatabase
    dependsOn migrateDatabase

    executable "sh"
    args "-c", "php artisan passport:install"
}

task generateEnvFile(type: Exec){
    group = 'Build'
    description = 'Genera el archivo .env'

    executable "sh"
    args "-c", "cp .env.example .env && php artisan key:generate"
}

task montaje(type: GradleBuild){
    group = 'Build'
    description = 'Montaje automatico de la aplicación cuando es descargada de cero'

    tasks = ['composer', 'generateEnvFile',
                'cleanDatabase', 'migrateDatabase', 'passportToken']
}